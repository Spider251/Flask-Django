1.数据库的操作
    1.插入
        1.创建实体类的对象
        2.完成插入
            db.session.add(实体对象)
            db.session.commit()
    2.查询
        1.基于db.session进行查询
            1.db.session.query(Models1,Models2...)
            参数:要查询的实体类(表),如果是多个实体类的话,相当于做多表连接查询
            返回:对应的类的一个查询对象
            2.查询执行函数
            目的:在query基础上得到最终的数据
            语法:db.session.query(Models).查询执行函数()
            1.all():以列表的方式返回query对象中所有的查询数据
            2.first():返回query对象中的第一个查询结果,如果没有结果,返回None
            3.first_or_404():返回query对象中的第一个查询结果,如果没有结果则终止程序并响应404
            4.count():返回query对象中的查询结果的数量
    3.查询过滤器函数
        作用:专门对数据进行筛选,返回部分行数据
        1.filer() 按指定条件进行过滤(单表,多表,定值,不定值)
        2.filter_by() 按等值条件进行过滤
        3.limit() 按限制行数量获取结果
        4.order_by() 按指定列进行排序
        5.group_by() 按指定条件进行分组
        语法:
        db.session.query().过滤器函数().执行函数()
        过滤器函数详解
        1.filter()
            注意:条件必须由 实体类.属性 组成
            1.查询年龄大于30的人的信息
            db.session.query(Users).filter(Users.age>30).all()
            2.查询id为1的人的信息
            db.session.query(Users).filter(Users.id==1).first()
            注意:filter()做等值判断时必须使用==
            3.查询年龄大于30并且id大于1的数据
            db.session.query(Users).filter(Users.age>30,Users.id>1).all()
            4.查询年龄大于30或者id为1的用户信息
            filter(or_(条件1,条件2))
            db.session.query(Users).filter(or_(Users.age>30,Users.id==1)).all()
            5.查询email中包含'w'Users信息
            db.session.query(Users).filter(Users.email.like('%w%')).all()
            6.查询id在[2,4]之间的信息
            db.session.query(Users).filter(Users.id.in_([2,4])).all()
            db.session.query(Users).filter(Users.age.between(35,40)).all()
        2.filter_by()
            注意:只能做等值判断,不能做不等值
            查询id为1的users信息
            db.session.query(Users).filter_by(id=1)
        3.limit()
            1.获取users表中的前两条数据
                db.session.query(Users).limit(2).all()
                select * from users limit 2
            2.获取users表中过滤前三条数据后剩余的前两条记录
                db.session.query(Users).limit(2).offset(3).all()
                select * from users limit 3,2
        4.order_by()
            #按照id倒序排序
            select * from users order by id desc;
            #先按照年龄倒序排序,再按照id升序排序
            select * from Users order by age desc,id asc;
            db.session.query(Users).order_by("age desc,id asc")
        5.group_by()
            1.将users表中的数据按照age进行分组
            db.session.query(Users).group_by('age').all()
        6.聚合函数
            1.查询users表中所有人的平均年龄
                select avg(age) from users;
                from sqlalchemy import func
                db.session.query(func.avg(Users.age).label('avgAge')).all()
            2.users表中,按年龄分组,再查每组的年龄平均值
                select avg(age) from users group by age
            func.avg():求平均值
            func.sum():求和
            func.max():求最大值
            func.min():求最小值
            func.count():求不为空的数量
2.基于Models类进行查询
    Mondels.query.查询过滤器().查询执行函数