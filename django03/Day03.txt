1. 模板
    1. 模板中的语法
        1. 变量(略)
        2. 标签
            1. 作用
                将服务器功能嵌入到模板中
            2. 语法
                {% 标签内容 %}
            3. 常用标签
                1. for
                    语法:
                        {% for 变量 in 元组|列表|字典 %}
                        {% endfor %}
                    内置变量: forloop
                        允许通过forloop得到本次循环的一些信息
                        forloop.counter : 当前循环遍历的次数
                        forloop.first : 判断是否为第一次新欢
                        forloop.last : 判断是否为最后一次循环
                2. if
                    语法
                    1. {% if xxx %}
                       {% endif %}
                    2.
                       {% if xxx %}
                       {% elif xxx %}
                       {% else %}
                       {% endif %}
                3. 过滤器
                    1. 什么是过滤器
                        在变量输出显示之前, 要对变量进行筛选和过滤
                    2. 语法
                        {{变量|过滤器:参数}}
                4. 静态文件
                    1. 什么是静态文件
                        不能被解释器动态解析的文件就是静态文件
                    2. Django中的静态文件的处理
                       (Django中必须要设置静态文件相关信息之后才能使用)
                       在 settings.py 中设置静态文件相关信息
                       1. 设置静态文件的访问路径
                            STATIC_URL = '/static/'
                            如果访问路径是http://localhost:8000/static/xxx的时候, 就到静态文件的存储目录中查找静态文件,而不走路由的解析
                       2. 设置静态文件的存储路径
                            指定静态文件保存在服务器上的哪个文件夹中
                            STATICFILES_DIRS=(os.path.join(BASE_DIR, 'static'),)
                            静态文件目录的存放位置:
                            1. 在项目的根目录处创建一个 static 目录, 用于保存静态文件
                            2. 每个应用中也可以创建一个 static 目录, 用于保存静态文件

                       3. 访问静态文件
                       {% static %} 表示的是静态文件路径
                            1. 通过静态文件访问路径去访问
                                /static/images/mz.jpg
                                http://127.0.0.1:8000/static/images/mz.jpg
                            2. 使用 {% static %} 访问静态资源
                                1.在模板的最顶层添加
                                    {% load static%}
                                2.在使用静态资源时
                                    <img src="{% static 'images/mz.jpg' %}">
                       练习:
                        1. 创建项目 - FruitDay, 并创建应用 index
                        2. 搭建模板和静态文件
                        3. 搭建首页模板 - index.html
                        4. 设置静态文件的相关配置
                        5. 将index.html的静态文件改成Django版本

                5. 模板的继承
		    1.在父模板中
			标识出哪些内容在子模板中允许被重写
			{% block 块名 %}
			  xxxx xxxx
			{% endblock %}
			block 作用:
			  1. 在父模板中正常显示
			  2. 在子模板中, 允许被修改
				如果不修改的话, 则按照父模板的内容来显示
		    2.在子模板中
			1. 指定继承自哪个父模板
			   {% extends '父模板名称' %}
			2. 覆盖父模板中的内容
		           {% block '块名' %}
			   {% endblock %}
 		6. url()的name参数
		    1. url()语法
			url(regex,views,kwargs,name)
			name:为了给当前的url起别名, 在反向解析地址时使用
		    2. 反向解析
			通过url()的别名生成对应的访问地址
			1. 在模板上做反向解析
			   1. 基本解析
				{% url '别名' %}
			   2. 带参数的解析
				{% url '别名' '参数1' '参数2' ... %}
			2. 在视图上做反向解析
			   1. 基本解析
				url = reverse('别名')
				url 就是通过别名解析出来的地址
			   2. 带参数解析
				url = reverse('别名',args=())
2. 模型 - Models
    1. 什么是模型
        根据数据库中表结构而创建出来的class
    2. ORM
        三大特征:
            1. 数据表 到 编程类的映射
            2. 数据类型的映射
            3. 关系映射
    3. 创建 和 配置数据库
        1. 创建数据库
            create database webdb default charset utf8 collate utf8_general_ci;
            创建 webdb 数据库
        2. Django中的数据库配置
            settsings.py 中 DATABASES 变量负责配置数据库信息
            DATABASES = {
                'default': {
                    'ENGINE': 'django.db.backends.sqlite3',
                    'NAME': os.path.join(BASE_DIR, 'db.sqlite3'),
                }
            }
            1. ENGINE : 指定连接到的数据库的引擎
                'django.db.backends.mysql'
            2. NAME : 指定要连接数据库的名称
                'webdb'
            3. USER : 指定进入到数据库的用户名
                取值 : 'root'
            4. PASSWORD : 指定进入到数据库的密码
                取值 : '123456'
            5. HOST : 指定要连接的主机地址
                取值 : 'localhost' 或 '127.0.0.1'
            6. PORT : 指定主机上开放的端口
                取值 : '3306',
            注意 : Django 中的 ORM 依赖于 mysqldb
                在初始化项目的时候
                import pymysql
                pymysql.install_as_mysqldb()

# mysql创建表的代码
python3 manage.py  makemigrations
python3 manage.py  migrate