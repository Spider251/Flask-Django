1.响应
    1.什么是响应
        响应是由服务端带给客户端的内容
        响应的内容可以是字符串,模板,重定向
    2.响应字符串 或 模板
        1.响应字符串
            return "普通字符串"
        2.响应模板
            return render_template('xxx.html')
            其本质还是响应字符串
        3.响应对象
            响应对象:将响应内容分装到一个对象中,以便完成更多的响应行为
            在Flask中使用,make_response()构建响应对象
            from flask import make_response
            @app.route('/xxx')
            def xxx(){
                resp = make_response('响应内容')
                resp = make_response(render_template('xxx.html'))
                #允许调用resp中的属性或方法们以便完成更多的响应行为
                return resp
            }
        4.重定向
            1.什么是重定向
                由服务器端通知客户端重新向新的地址发送请求
            2.语法
                from flask import redirect
                @app.route('/xxx')
                def xxx():
                    xxxx xxxx
                    return redirect('重定向地址')
2.文件上传
    1.注意问题
        表单中如果有文件上传的话,必须遵循以下两个要求
           1.表单的提交方式method必须为post
           2.表单的enctype属性的值必须为multipart/form-data
           <form method="post" enctype="multipart/form-data">
           <form>
    2.服务器端
        1.获取上传文件
            语法:request.files
            作用:获取上传的所有文件
            request.files['uimg']
            从上传的文件中,将名称为uimg的文件获取出来并保存在f中
        2.将文件保存到指定的目录处
            语法:f.save('保存路径')
            作用:将文件保存到指定目录处
            注意:
                1.保存路径可以是相对路径也可以是绝对路径
                2.保存路径要精确到文件名称
                3.保存的目录必须是已存在的
            ex:
                f.save('static/'+f.filename)
                f.filename : 能够获取出文件名
3.模型 -Models
    1.什么是模型
        模型,是根据数据库中标结构而创建出来的class
        模型就是讲数据表进行"类化",以类(对象)的方式来操作数据表(数据)
        数据库每一张表到编程语言中,就是一个class
        表中的每一个列对应到编程语言中就是class中的一个属性
        表中的每一条数据对应到编程语言中就是class的一个对象
        模型:可以称为"模型类"或"实体类"
    2.模型的框架 - ORM
        1.什么是ORM
            ORM:Object Relational Mapping
            简称:ORM,O/RM,O/R Mapping
            中文:对象关系映射
        2.ORM框架的三大特征
            1.数据表(Table)到编程类(Class)的映射
                数据库中每一张表对应到编程语言中都有一个类
                在ORM中:
                    允许将数据表自动生成一个类
                    允许将类自动生成一张数据表
            2.数据类型的映射
                数据表中的字段以及数据类型对应到编程语言中有对应的属性和类型
            3.关系映射
                将数据库中表与表之间的关系对应到编程语言中类与类之间关系
                数据库中表与表之间的关系:
                    1.一对一
                        A表中的一条记录能够与B表中的一条记录关联
                        B表中的一条记录能够与A表中的一条记录关联
                        主键,外键,唯一约束
                    2.一对多
                        A表中的一条记录能够与B表中的多条记录相关联
                        B表中的一条记录只能与A表中的一条记录相关联
                    3.多对多
                        A表中的一条记录能够与B表中的多条记录相关联
                        B表中的一条记录能够与A表中的多条记录相关联
                    实现方式:
                        增加第三张关联来实现多对多
        4.ORM的优点
            1.分装了数据库中所有的操作,大大的提高了开发效率
            2.可以省略庞大的数据访问层,即便不用SQL编码也能完成对数据的CRUD操作
    3.Flask中的ORM框架
        1.python中的ORM
            比较常用的ORM框架 - SQLAlchemy
            安装:sudo pip3 install sqlalchemy
        2.在Flask中
            使用的也是SQLAlchemy
            但需要安装Flask-SQL插件包
    4.创建数据库 - flask
        create database flask default charset utf8
        collate utf8_general_ci;
        use flask;
        show tables;
    5.在Flask中配置数据库
        1.通过app(Flask应用实例)构建配置信息
        app.config['SQLALCHEMY_DATABASE_URI']="mysql://用户名:密码@主机:端口/数据库"
        app.config['SQLALCHEMY_DATABASE_URI']="mysql://root:123456@localhost:3306/flask"
        2.创建数据库应用实例
        from flask_sqlalchemy import SQLAlchemy
        SQLAlchemy(app)
    6.定义模型
        语法:
            class MODELNAME(db.Model):
                __tablename__ = "TABLENAME"
                COLUMN_NAME=db.Column(db.TYPE,OPTIONS)
            1.MODELNAME:定的模型类的类名,通常参考表名
            2.TABLENAME:映射到数据库中表的名称
            3.COLUMN_NAME:属性名,映射到数据表中就是列明
            4.TYPE:映射到列的数据类型
            5.OPTIONS:列选项

            db.TYPE 列的数据类型
            类型名          python类型         说明
            Integer        int               普通整数,32位
            SmallInteger   int               小范围整数,16位
            BigInteger     long              不限精度的整数
            Float          float             浮点类型
            Numeric        decimal.Decimal   定点类型
            String         str               变长字符串
            Text           str               变长字符串
            Boolean        bool              布尔值
            Date           datetime.date     日期
            Time           datetime.time     时间
            DateTime       datetime.datetime 日期和时间

            OPTINS 列选项
            选项名           说明
            primary_key     如果设置为True表示该列为主键
            unique          如果设置为True表示该列的值唯一
            index           如果设置为True表示该列要创建索引
            nullable        如果设置为True表示该列允许为空,默认允许为空
            default         指定该列的默认值